@page "/dinklub"
@page "/dinklub/{id:int}"
@using P3TournamentPlanner.Shared;
@using System.IO;
@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@using System.Linq;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using P3TournamentPlanner.Client.Services;
@inject Services.KlubService klubService
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject MessageService MessageService
@attribute [Authorize]

<h1>Din klub - @club.name</h1>
<section class="klub-section">
    <div class="klub-info">
        <EditForm Model="club" OnValidSubmit="HandleClubSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-section">
                <div class="form-div">
                    <div class="item-div">
                        <label for="navn">Navn:</label>
                        <InputText @bind-Value="club.name" id="navn" type="text" />
                    </div>

                    <div class="item-div">
                        <label for="adresse">Adresse:</label>
                        <InputText @bind-Value="club.address" id="adresse" type="text" />
                    </div>

                    <div class="item-div" style="margin-top: auto">
                        <button class="btn-primary" type="submit">Gem</button>
                    </div>
                </div>

                <div class="form-div">
                    <div class="item-div">
                        <label>Logo:</label>
                        <InputFile OnChange="@TestXD"></InputFile>
                    </div>

                    <div class="item-div">
                        <img src="data:image/png;base64, @club.base64Logo" style="margin: auto">
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</section>

@if (id != null)
{
    <section class="klub-section">
        <div class="header-div">
            <h2>Klub administratorer</h2>
            <div class="btn-div">
                <button class="btn-primary btn-klubadmin" @onclick="ShowNewManager">Opret ny klub administrator</button>
            </div>
        </div>
        <div class="table-container">
            <EditForm Model="cm" OnValidSubmit="HandleManagerPut">
                <table>
                    <thead>
                        <tr>
                            <th>Navn</th>
                            <th>Email</th>
                            <th>Telefon</th>
                            <th>Discord</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (ClubManager clubManager in clubManagers)
                        {
                            <tr>
                                <td>@clubManager.contactinfo.name</td>
                                <td>@clubManager.contactinfo.email</td>
                                <td>@clubManager.contactinfo.tlfNr</td>
                                <td>@clubManager.contactinfo.discordID</td>
                                <td class="btn-td">
                                    <div class="td-div">
                                        <button class="btn" type="button" @onclick="() => ShowMananger(clubManager)">Rediger</button>
                                    </div>
                                </td>
                                <td class="btn-td">
                                    <div class="td-div">
                                        <button class="btn" type="button" @onclick="() => Delete(clubManager)">Slet</button>
                                    </div>
                                </td>
                            </tr>
                            @if (userID == clubManager.userID)
                            {
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <tr class="edittr">
                                    <td class="edit">
                                        <label>Navn:</label>
                                        <InputText @bind-Value="cm.contactinfo.name" />
                                    </td>
                                    <td class="edit">
                                        <label>Email:</label>
                                        <InputText @bind-Value="cm.contactinfo.email" />
                                    </td>
                                    <td class="edit">
                                        <label>Telefon:</label>
                                        <InputText @bind-Value="cm.contactinfo.tlfNr" />
                                    </td>
                                    <td class="edit">
                                        <label>Discord:</label>
                                        <InputText @bind-Value="cm.contactinfo.discordID" />
                                    </td>
                                    <td class="btn-td">
                                        <div class="td-div">
                                            <button class="btn" type="submit">Gem</button>
                                        </div>
                                    </td>
                                    <td class="btn-td">
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </EditForm>
        </div>
        <div style="display: @display">
            <div class="header-div">
                <h3>Ny klub administrator</h3>
            </div>
            <EditForm Model="cm" OnValidSubmit="HandleManagerPost">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="manager-form">
                    <div class="form-item">
                        <label>Navn:</label>
                        <InputText @bind-Value="cm.contactinfo.name" />
                    </div>
                    <div class="form-item">
                        <label>Email:</label>
                        <InputText @bind-Value="cm.contactinfo.email" />
                    </div>
                    <div class="form-item">
                        <label>Telefon:</label>
                        <InputText @bind-Value="cm.contactinfo.tlfNr" />
                    </div>
                    <div class="form-item">
                        <label>Discord:</label>
                        <InputText @bind-Value="cm.contactinfo.discordID" />
                    </div>
                    <div class="btn-div wrapper">
                        <button class="btn-primary" type="submit">Opret</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </section>

    <section class="klub-section">
        <div class="header-div">
            <h2>Dine hold</h2>
            <div class="btn-div">
                <button class="btn-primary btn-klubadmin" @onclick="NewTeam">Opret nyt hold</button>
            </div>
        </div>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Navn</th>
                        <th>Liga</th>
                        <th>Division</th>
                        <th>Antal spillere</th>
                    </tr>
                </thead>
                <tbody id="hold">
                    @foreach (Team team in teams)
                    {
                        <tr id="team-tr" @onclick="() => ShowTeam(team)">
                            <td>@team.teamName</td>
                            <td>CS:GO</td>
                            <td>Division @*@team.divisionID*@</td>
                            <td>5</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </section>
}
<div id="@MessageService.messageStyle" style="display: @MessageService.messageDisplay">
    @MessageService.message
    <a @onclick="reloadPage" class="reload">Reload</a>
    <a class="dismiss" @onclick='() => MessageService.showMessage("none", "")'>🗙</a>
</div>

@code {
    [Parameter]
    public Nullable<int> id { get; set; }

    public string display = "none";

    public string userID;

    Club club = new Club();

    ClubManager cm = new ClubManager(new Contactinfo("", "", "", "", ""));
    List<Team> teams = new List<Team>();
    List<ClubManager> clubManagers = new List<ClubManager>();

    protected override async Task OnParametersSetAsync()
    {
        MessageService.RefreshRequested += Refresh;
        MessageService.RerenderRequested += Rerender;

        if (id != null)
        {
            HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
            client.BaseAddress = new Uri("https://localhost:44341/");

            Console.WriteLine("Get Send");
            club = await Http.GetFromJsonAsync<Club>("api/Klub/klub?clubID=" + id);
            Console.WriteLine("På den anden side");
            if (club.clubID == 0) NavigationManager.NavigateTo($"/");
            Console.WriteLine(club);

            await GetTeams();
        }
    }

    async Task GetTeams()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        teams = await Http.GetFromJsonAsync<List<Team>>("api/TeamInformation/teamTest?clubID=" + id);
        Console.WriteLine("På den anden side");
        Console.WriteLine(teams);

        await GetManagers();
    }

    async Task GetManagers()
    {
        clubManagers = new List<ClubManager>();

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        clubManagers = await Http.GetFromJsonAsync<List<ClubManager>>("api/ClubManager?clubID=" + id);
        Console.WriteLine("På den anden side");
        Console.WriteLine(clubManagers);

        StateHasChanged();
    }

    async Task HandleClubSubmit()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        if (id == null)
        {
            var result = await Http.PostAsJsonAsync<Club>("api/klub", club);
            if (result.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("admin");
            }
            else
            {
                MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
            }
        }
        else
        {
            var result = await Http.PutAsJsonAsync<Club>("api/Klub", club);
            if (result.IsSuccessStatusCode)
            {
                MessageService.showMessage("blazor-gemt-ui", result.Content.ReadAsStringAsync().Result);
                Rerender();
            }
            else
            {
                MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
            }
        }
    }

    async Task HandleManagerPut()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine(cm.userID);

        var result = await client.PutAsJsonAsync<ClubManager>("api/ClubManager", cm);

        if (result.IsSuccessStatusCode)
        {
            MessageService.showMessage("blazor-gemt-ui", result.Content.ReadAsStringAsync().Result);
            Rerender();
        }
        else
        {
            MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
        }
        ShowMananger(cm);
    }

    async Task HandleManagerPost()
    {
        cm.ClubID = club.clubID;

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        var result = await Http.PostAsJsonAsync<ClubManager>("api/ClubManager", cm);

        if (result.IsSuccessStatusCode)
        {
            MessageService.showMessage("blazor-gemt-ui", result.Content.ReadAsStringAsync().Result);
            ShowNewManager();
            Rerender();
        }
        else
        {
            MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
        }
    }

    void ShowMananger(ClubManager clubManager)
    {
        if (clubManager.userID == userID)
        {
            userID = "";
            cm = new ClubManager(new Contactinfo());
            InvokeAsync(GetManagers);
        }
        else
        {
            cm = clubManager;
            userID = clubManager.userID;
        }
    }

    void ShowNewManager()
    {
        if (display == "none")
        {
            display = "block";
        }
        else
        {
            display = "none";
            cm = new ClubManager(new Contactinfo());
        }
    }

    void NewTeam()
    {
        NavigationManager.NavigateTo($"/nythold/{id}");
    }

    public void ShowTeam(Team team)
    {
        NavigationManager.NavigateTo($"/hold/{team.teamID}");
    }

    async Task Alert(ClubManager clubManager)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Er du sikker?");

        if (confirmed == true)
        {
            HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
            client.BaseAddress = new Uri("https://localhost:44341/");

            await Http.DeleteAsync("api/ClubManager/Delete/" + clubManager.userID);
        }
    }

    public async void Delete(ClubManager clubManager)
    {
        await Alert(clubManager);
    }

    //Laver billede om til base64 byte representation hver gang en ny fil vælges
    //File -> datastream -> memorystream -> byte array -> base64 string
    private async Task TestXD(InputFileChangeEventArgs e)
    {
        Console.WriteLine("Det er her");
        Stream stream = e.File.OpenReadStream();
        MemoryStream ms = new MemoryStream();

        await stream.CopyToAsync(ms);
        byte[] imgByte = ms.ToArray();
        club.base64Logo = Convert.ToBase64String(imgByte);
    }

    void reloadPage()
    {
        NavigationManager.NavigateTo($"/dinklub/{club.clubID}", forceLoad: true);
    }

    private void Refresh()
    {
        StateHasChanged();
    }

    private void Rerender()
    {
        InvokeAsync(OnParametersSetAsync);
        StateHasChanged();
    }
}
