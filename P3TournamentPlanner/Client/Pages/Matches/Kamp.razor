@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject MessageService MessageService
@using P3TournamentPlanner.Shared;
@using P3TournamentPlanner.Client.Services;
@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@page "/kamp/{id:int}"

<style>
    .page {
        background-image: linear-gradient(rgba(0,0,0,0.8), rgba(0,0,0,0.8)), url(/images/maps/@GetMap());
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        position: absolute;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;
    }
</style>

@if (match.teams == null)
{
    <p>Loading...</p>
}
else
{
    <section class="kamp-section">
        <div class="team-div">
            <div class="team-name match-header">
                <h1>@match.teams[0].teamName</h1>
                <img src="data:image/png;base64, @match.teams[0].club.base64Logo">
            </div>

            @if (match.playedFlag)
            {
                <div>
                    <h1 class="match-header" id="center">@match.team1Score - @match.team2Score</h1>
                    <p>@match.startTime</p>
                </div>
            }
            else
            {
                <div>
                    <h1 class="match-header" id="center">VS</h1>
                    <p>@match.startTime</p>
                </div>
            }

            <div class="team-name match-header">
                <img src="data:image/png;base64, @match.teams[1].club.base64Logo">
                <h1>@match.teams[1].teamName</h1>
            </div>
        </div>

        <div class="info-div">
            <div class="item-div">
                <p>Server ip:</p>
                @if (IsManager)
                {
                    <p>@match.serverIP</p>
                }
                else
                {
                    <p>Kun trænere kan se server ip</p>
                }
            </div>
            <div class="item-div" id="adresse">
                <p>Hobro Vikings</p>
                <p>Amerikavej 22, 9500 Hobro</p>
            </div>
        </div>
    </section>
    @if (IsManager)
    {
        <section>
            <EditForm Model="match" OnValidSubmit="PutMatch">
                <div class="container">
                    <div>
                        <h2>Rediger kamp</h2>
                    </div>
                    <div class="wrapper">
                        <button class="btn-primary" type="submit"> Gem</button>
                    </div>
                    <div class="wrapper">
                        <button class="btn-primary" type="button" @onclick='() => DeleteMatch()'> Slet Kamp</button>
                    </div>
                </div>
                <hr />
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="edit-section">
                    <div class="edit-div">
                        <h3>Ændre resultat</h3>
                        <div class="form-item">
                            <label>@match.teams[0].teamName:</label>
                            <InputNumber min="0" @bind-Value="match.team1Score"></InputNumber>
                        </div>
                        <div class="form-item">
                            <label>@match.teams[1].teamName:</label>
                            <InputNumber min="0" @bind-Value="match.team2Score"></InputNumber>
                        </div>
                    </div>
                    <div class="edit-div">
                        <h3>Ændre map</h3>
                        <div class="form-item">
                            <label>Map:</label>
                            <InputSelect @bind-Value="match.map">
                                <option value="Ancient">Ancient</option>
                                <option value="dust2">Dust 2</option>
                                <option value="Inferno">Inferno</option>
                                <option value="Mirage">Mirage</option>
                                <option value="Nuke">Nuke</option>
                                <option value="Overpass">Overpass</option>
                                <option value="Vertigo">Vertigo</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="edit-div">
                        <h3>Admin</h3>
                        <div class="form-item">
                            <label>Server ip:</label>
                            <InputText @bind-Value="match.serverIP"></InputText>
                        </div>
                        <div class="form-item">
                            <label>Start tidspunkt:</label>
                            <InputText @bind-Value="match.startTime"></InputText>
                        </div>
                    </div>
                </div>
            </EditForm>
        </section>
        <div id="@MessageService.messageStyle" style="display: @MessageService.messageDisplay">
            @MessageService.message
            <a @onclick="reloadPage" class="reload">Reload</a>
            <a class="dismiss" @onclick='() => MessageService.showMessage("none", "")'>🗙</a>
        </div>
    }
}
@code {
    [Parameter]
    public int ID { get; set; }

    public bool IsManager { get; set; }

    public Match match = new Match();

    string messageDisplay = "none";

    void showMessage()
    {
        if (messageDisplay == "none")
        {
            messageDisplay = "block";
        }
        else
        {
            messageDisplay = "none";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        MessageService.RefreshRequested += Refresh;
        MessageService.RerenderRequested += Rerender;

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://agreeable-meadow-086a24903.azurestaticapps.net/");

        match = await client.GetFromJsonAsync<Match>($"api/Match?matchID=" + ID); ;

        Console.WriteLine("div" + match.divisionID);
        Console.WriteLine("league" + match.leagueID);

        foreach (Team team in match.teams)
        {
            team.club = await client.GetFromJsonAsync<Club>($"api/Klub/klub?clubID={team.clubID}");
        }

        try
        {
            IsManager = await Http.GetFromJsonAsync<bool>($"api/Authentication/isManager?ID1={match.teams[0].clubID.ToString()}&ID2={match.teams[1].clubID.ToString()}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            Console.WriteLine(exception.Message);
            IsManager = false;
        }
    }

    async Task DeleteMatch()
    {

        var result = await Http.DeleteAsync("api/Match/delete/" + ID);

        if (result.Content.ReadAsStringAsync().Result.Contains("Access denied"))
        {
            MessageService.showMessage("blazor-fejl-ui", "Access denied: Du har ikke adgang til denne komando");
        }
        else if (result.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/ligaer/{match.leagueID}", forceLoad: true);
        }
        else
        {
            MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
        }
    }

    async Task PutMatch()
    {
        Console.WriteLine(match.map);
        Console.WriteLine(match.divisionID);
        match.playedFlag = true;
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://agreeable-meadow-086a24903.azurestaticapps.net/");

        Console.WriteLine("Put Send");
        var result = await client.PutAsJsonAsync<Match>("api/Match", match);
        Console.WriteLine("På den anden side");

        if (result.IsSuccessStatusCode)
        {
            MessageService.showMessage("blazor-gemt-ui", result.Content.ReadAsStringAsync().Result);
            Rerender();
        }
        else
        {
            MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
        }
    }

    public string GetMap()
    {
        if (match.playedFlag)
        {
            return match.map + ".jpg";
        }
        return "get-image-large.jpg";
    }

    void reloadPage()
    {
        NavigationManager.NavigateTo($"/kamp/{ID}", forceLoad: true);
    }

    private void Refresh()
    {
        StateHasChanged();
    }

    private void Rerender()
    {
        InvokeAsync(OnInitializedAsync);
        StateHasChanged();
    }
}