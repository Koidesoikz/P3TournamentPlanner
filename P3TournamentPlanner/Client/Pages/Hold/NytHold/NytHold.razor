@using P3TournamentPlanner.Shared;
@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@using System.Linq;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using P3TournamentPlanner.Client.Pages.Hold.NytHold.NytHoldPartials;
@inherits NytHoldBase
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@page "/nythold/{clubID:int}"

<h1>Opret nyt hold</h1>
<h3>Guide til oprettelse af hold</h3>
<ul>
    <li><p>Start med at udfylde navnet på dit hold.</p></li>
    <li><p>Herefter kan du vælge din træner for holdet, ud fra klub administratorene (Har du ingen ledige klub admins kan du tilføje en senere).</p></li>
    <li><p>Du kan nu tilføje de spillere som du vil have på holdet (du kan tilføje så mange du vil).</p></li>
    <li><p>For at oprette holdet kan du trykke på "opret hold" knappen (dit hold vil nu være oprette).</p></li>
</ul>

<h2>Dit hold</h2>
<EditForm Model="team">
    <div class="team-info-div">
        <div class="item-div">
            <label>Navn:</label>
            <InputText @bind-Value="team.teamName"></InputText>
        </div>

        <div class="item-div">
            <label>Vælg træner:</label>
            <select @onchange="SetManager">
                <option>Vælg klub administrator</option>
                @foreach (ClubManager clubManager in cm)
                {
                    <option value="@clubManager.userID">@clubManager.contactinfo.name</option>
                }
            </select>
        </div>

        <div class="item-div">
            <button class="btn-primary" @onclick="HandleTeamPost">Opret hold</button>
        </div>
    </div>
    <SpillerForm />
</EditForm>

@code {
    protected override async Task OnParametersSetAsync()
    {
        await GetManagers();

        await GetTeams();

        GetManagersWithoutTeam();
    }

    public async Task HandleTeamPost()
    {
        team.club.clubID = clubID;

        foreach (Player player in team.players)
        {
            Console.WriteLine(player.IRLName);
        }

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        await client.PostAsJsonAsync<Team>("api/TeamInformation", team);

    }

    public async Task GetManagers()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        clubManagers = await client.GetFromJsonAsync<List<ClubManager>>("api/ClubManager?clubID=" + clubID);
        Console.WriteLine("På den anden side");
        Console.WriteLine(clubManagers);
    }

    async Task GetTeams()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        teams = await client.GetFromJsonAsync<List<Team>>("api/TeamInformation/teamTest?clubID=" + clubID);
        Console.WriteLine("På den anden side");
        Console.WriteLine(teams);
    }

    public void GetManagersWithoutTeam()
    {
        foreach (ClubManager clubManager in clubManagers)
        {
            if (HasTeam(clubManager) == false)
            {
                cm.Add(clubManager);
            }
        }
    }

    public bool HasTeam(ClubManager clubManager)
    {
        foreach (Team team in teams)
        {
            if (clubManager.userID == team.manager.userID)
            {
                return true;
            }
        }
        return false;
    }

    public void SetManager(ChangeEventArgs e)
    {
        team.manager.userID = e.Value.ToString();
    }
}
