@using P3TournamentPlanner.Shared;
@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@using System.Linq;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@using P3TournamentPlanner.Client.Pages.Hold.NytHold.NytHoldPartials;
@inherits NytHoldBase
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@page "/nythold/{clubID:int}"

<h1>Opret nyt hold</h1>
<h3>Guide til oprettelse af hold</h3>
<ul>
    <li><p>Start med at udfylde navnet på dit hold.</p></li>
    <li><p>Herefter kan du vælge din træner for holdet, ud fra klub administratorene (Har du ingen ledige klub admins kan du tilføje en senere).</p></li>
    <li><p>Du kan nu tilføje de spillere som du vil have på holdet (du kan tilføje så mange du vil).</p></li>
    <li><p>For at oprette holdet kan du trykke på "opret hold" knappen (dit hold vil nu være oprette).</p></li>
</ul>

<h2>Dit hold</h2>
<EditForm Model="team" OnValidSubmit="HandleTeamPost">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="team-info-div">
        <div class="item-div">
            <label>Navn:</label>
            <input type="text" @bind="team.teamName" />
        </div>

        <div class="item-div">
            <label>Vælg træner:</label>
            <select @bind="team.manager.userID">
                <option>Vælg klub administrator</option>
                @foreach (ClubManager clubManager in cm)
                {
                    <option value="@clubManager.userID">@clubManager.contactinfo.name</option>
                }
            </select>
        </div>
        <div class="item-div">
            <button class="btn-primary" type="submit">Opret hold</button>
        </div>
    </div>
    @*<div class="container">
        <div class="spiller-div">
            <div class="spiller-form">
                <div class="header-div">
                    <h3>Ny spiller:</h3>
                    <hr />
                </div>
                <div class="item-div">
                    <label>Navn:</label>
                    <InputText @bind-Value="player.IRLName" />
                </div>
                <div class="item-div">
                    <label>In-game navn:</label>
                    <InputText @bind-Value="player.IGName" />
                </div>
                <div class="item-div">
                    <label>Steam-ID:</label>
                    <InputText @bind-Value="player.steamID" />
                </div>
                <div class="item-div">
                    <label>Rank:</label>
                    <InputSelect @bind-Value="player.CSGORank">
                        <option value="">Vælg rank</option>
                        <option value="Silver 1">Silver 1</option>
                        <option value="Silver 2">Silver 2</option>
                        <option value="Silver 3">Silver 3</option>
                        <option value="Silver 4">Silver 4</option>
                        <option value="Silver Elite">Silver Elite</option>
                        <option value="Silver Elite Master">Silver Elite Master</option>
                        <option value="Gold Nova 1">Gold Nova 1</option>
                        <option value="Gold Nova 2">Gold Nova 2</option>
                        <option value="Gold Nova 3">Gold Nova 3</option>
                        <option value="Gold Nova Master">Gold Nova Master</option>
                        <option value="Master Guardian 1">Master Guardian 1</option>
                        <option value="Master Guardian 2">Master Guardian 2</option>
                        <option value="Master Guardian Elite">Master Guardian Elite</option>
                        <option value="Distingquished Master Guardian">Distingquished Master Guardian</option>
                        <option value="Legendary Eagle">Legendary Eagle</option>
                        <option value="Legendary Eagle Master">Legendary Eagle Master</option>
                        <option value="Supreme Master First Class">Supreme Master First Class</option>
                        <option value="The Global Elite">The Global Elite</option>
                    </InputSelect>
                </div>
                <div class="item-div">
                    <button class="btn-primary" @onclick="AddPlayer">Tilføj spiller</button>
                </div>
            </div>
            <div class="spiller-list-div">
                <h3>Spillere</h3>
                <div class="spiller-list">
                    @foreach (Player player in team.players)
                    {
                        <p id="name">@player.IRLName</p>
                        <hr />
                        <div class="list">
                            <p>@player.IGName</p>
                            <p>@player.steamID</p>
                            <p>@player.CSGORank</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>*@

</EditForm>

@code {
    protected override async Task OnParametersSetAsync()
    {
        await GetManagers();
        await GetClub();
        await GetTeams();

        GetManagersWithoutTeam();
    }

    public async Task HandleTeamPost()
    {
        SetManager();

        team.club = club;
        team.divisionID = 0;
        team.leagueID = 0;
        team.teamSkillRating = 0;
        team.placement = 0;
        team.matchesPlayed = 0;
        team.matchesWon = 0;
        team.matchesDraw = 0;
        team.matchesLost = 0;
        team.roundsWon = 0;
        team.roundsLost = 0;
        team.points = 0;
        team.archiveFlag = false;

        foreach (Player player in team.players)
        {
            Console.WriteLine(player.IRLName);
        }

        Console.WriteLine("HER -------------- !");
        Console.WriteLine(team.manager.contactinfo.name);

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        await client.PostAsJsonAsync<Team>("api/TeamInformation", team);

    }

    public async Task GetManagers()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        clubManagers = await Http.GetFromJsonAsync<List<ClubManager>>("api/ClubManager?clubID=" + clubID);
        Console.WriteLine("På den anden side");
        Console.WriteLine(clubManagers);
    }

    async Task GetTeams()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        teams = await Http.GetFromJsonAsync<List<Team>>("api/TeamInformation/teamTest?clubID=" + clubID);
        Console.WriteLine("På den anden side");
        Console.WriteLine(teams);
    }

    async Task GetClub()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        club = await client.GetFromJsonAsync<Club>($"api/Klub/klub?clubID={clubID}");
    }

    public void GetManagersWithoutTeam()
    {
        foreach (ClubManager clubManager in clubManagers)
        {
            if (HasTeam(clubManager) == false)
            {
                cm.Add(clubManager);
            }
        }
    }

    public bool HasTeam(ClubManager clubManager)
    {
        foreach (Team team in teams)
        {
            if (clubManager.userID == team.manager.userID)
            {
                return true;
            }
        }
        return false;
    }

    public void SetManager()
    {
        foreach (ClubManager clubManager in cm)
        {
            if (team.manager.userID == clubManager.userID)
            {
                team.manager = clubManager;
            }
        }
    }

    void AddPlayer()
    {
        team.players.Add(this.player);

        this.player = new Player();
        StateHasChanged();
    }
}
