@using P3TournamentPlanner.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using P3TournamentPlanner.Client.Services;
@inherits NyLigaBase
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject MessageService MessageService
<h1>Ligaer</h1>

<div class="btn-div">
    <button class="btn-primary btn-klubadmin" @onclick='() => ShowNewLiga("blcok")'>Opret ny liga</button>
</div>
<div id="matchSection" style="width: 100%">
    <table class="boxes">
        <thead>
            <tr>
                <th>Liga Navn</th>
                <th>Spil</th>
                <th>Antal Hold</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (League liga in ligas)
            {

                <tr @onclick="() => ShowLiga(liga.leagueID)">
                    <td>@liga.name</td>
                    <td>CS:GO</td>
                    <td>@liga.teamAmount</td>
                    <td>@liga.archiveFlag</td>
                </tr>
            }
        </tbody>
    </table>

    <div style="display: @newLigaDisplay">
        <div class="header-div">
            <h3>Ny Liga</h3>
        </div>
        <EditForm Model="liga">
            <div class="liga-form">
                <div class="form-item">
                    <label>Liga Navn:</label>
                    <input @bind="liga.name" />
                </div>
                <div class="form-item">
                    <label>Spil:</label>
                    <select @bind="liga.game.name">
                        <option value="">Vælg spil</option>
                        <option value="CS:GO">CS:GO</option>
                    </select>
                </div>
                <div class="form-item">
                    <label>Admin:</label>
                    <select @onchange="SetAdmin">
                        <option value="">Vælg admin</option>
                        @foreach (SiteAdmin admin in admins)
                        {
                            <option value="@admin.contactinfo.userID"> @admin.contactinfo.name </option>
                        }
                    </select>
                </div>
                <div class="btn-div">
                    <button class="btn-primary" type="button" @onclick='() => ShowNewLiga("none")'>Cancel</button>
                </div>
                <div class="btn-div">
                    <button class="btn-primary" type="button" @onclick='PostLiga'>Opret</button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<div id="@MessageService.messageStyle" style="display: @MessageService.messageDisplay">
    @MessageService.message
    <a @onclick="reloadPage" class="reload">Reload</a>
    <a class="dismiss" @onclick='() => MessageService.showMessage("none", "")'>🗙</a>
</div>


@code {

    //Auth Var
    bool isAuth = false;
    string roleRequirement = "Administrator";

    protected override async Task OnInitializedAsync()
    {
        MessageService.RefreshRequested += Refresh;
        MessageService.RerenderRequested += Rerender;

        try
        {
            isAuth = await Http.GetFromJsonAsync<bool>($"api/authentication?role={roleRequirement}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            //idfk... Redirect eller sådan noget xd
            Console.WriteLine("Exeption Hit!");
        }


        if (isAuth)
        {
            Console.WriteLine("lesgo!");
        }
        else
        {
            Console.WriteLine("Sadge");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        ligas = await Http.GetFromJsonAsync<List<League>>("api/Ligaer");
        Console.WriteLine("På den anden side");

        await GetAdmin();
    }

    public void ShowLiga(int leagueID)
    {
        NavigationManager.NavigateTo($"/admin/ligaer/{leagueID}");
    }

    async Task PostLiga()
    {
        Console.WriteLine("Post Send");
        var result = await Http.PostAsJsonAsync<League>("api/Ligaer", liga);
        Console.WriteLine("På den anden side");

        if (result.Content.ReadAsStringAsync().Result.Contains("Access denied"))
        {
            MessageService.showMessage("blazor-fejl-ui", "Access denied: Du har ikke adgang til denne komando");
        }
        else if (result.IsSuccessStatusCode)
        {
            MessageService.showMessage("blazor-gemt-ui", result.Content.ReadAsStringAsync().Result);
            Rerender();
            ShowNewLiga("none");
        }
        else
        {
            MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
        }
    }

    async Task GetLiga()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        ligas = await client.GetFromJsonAsync<List<League>>("api/Ligaer");
        Console.WriteLine("På den anden side");
        StateHasChanged();
    }

    async Task GetAdmin()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        admins = new List<SiteAdmin>();

        Console.WriteLine("Get Send");
        users = await Http.GetFromJsonAsync<List<User>>("api/Admin/users");
        Console.WriteLine("På den anden side");

        foreach (User user in users) if (user.roles.Contains("Administrator"))
            {
                contactinfo = new Contactinfo();
                await GetContactInfo(user.ID);
            }

        StateHasChanged();
    }

    async Task GetContactInfo(string UserID)
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        contactinfo = await Http.GetFromJsonAsync<Contactinfo>("api/User?userID=" + UserID);
        Console.WriteLine("Heeeer" + contactinfo.name);
        Console.WriteLine("På den anden side");
        admins.Add(new SiteAdmin(contactinfo));
    }

    public void SetAdmin(ChangeEventArgs e)
    {
        liga.admin.contactinfo.userID = e.Value.ToString();

        foreach (SiteAdmin siteAdmin in admins)
        {
            if (liga.admin.contactinfo.userID == siteAdmin.contactinfo.userID)
            {
                liga.admin.contactinfo = siteAdmin.contactinfo;
            }
        }
    }

    string Display = "ligaer";

    string newLigaDisplay = "none";

    void ShowNewLiga(string display)
    {
        newLigaDisplay = display;
        StateHasChanged();
    }

    public void ChangeDisplay(string display)
    {
        Display = display;
        StateHasChanged();
    }

    void reloadPage()
    {
        NavigationManager.NavigateTo("/admin", forceLoad: true);
    }

    private void Refresh()
    {
        StateHasChanged();
    }

    private void Rerender()
    {
        InvokeAsync(OnParametersSetAsync);
        StateHasChanged();
    }
}