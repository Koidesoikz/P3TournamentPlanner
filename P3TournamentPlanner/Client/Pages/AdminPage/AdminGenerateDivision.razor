@page "/admin/ligaerDivision/genererdivisoner/{leagueID:int}"
@using P3TournamentPlanner.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
<div class="header-div">
    <h1>Generer Divisoner</h1>
    <div class="wrapper">
        <button class="btn-primary" @onclick="DivisionListPost">Gem divisioner</button>
    </div>
</div>

<section>
    @foreach(Division division in Divisions) {
        <div class="division-div" ondrop="">
            @if(division.divisionID == 0) {
                <div class="header-div">
                    <h2>Holding division</h2>
                    @if(Divisions.Count == 1) {
                        <div class="wrapper">
                            <button @onclick="AutoGenerateDivisions">Auto generer divisioner</button>
                        </div>
                    }
                </div>
                <hr />
            } else {
                <div>
                    <h2>@division.divisionID. Division</h2>
                    <hr />
                </div>

            }
            @foreach(Team team in division.teams) {
                <div class="team-div">
                    <div class="wrapper">
                        <h3>@team.teamName</h3>
                    </div>
                    <div>
                        @foreach(Division division1 in Divisions) {
                            @if(division1.divisionID != division.divisionID && division1.divisionID != 0) {
                                <button class="btn-primary" @onclick="() => MoveDivision(division.divisionID, division1, team)">Flyt til @division1.divisionID. division</button>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    }
    <div>
        <button @onclick="createDivision">Opret ny division</button>
    </div>
</section>

@code {
    [Parameter]
    public int leagueID { get; set; }

    string divisionid = "";

    List<Division> Divisions = new List<Division>();

    //Auth Var
    bool isAuth = false;
    string roleRequirement = "Administrator";

    protected override async Task OnInitializedAsync() {
        try {
            isAuth = await Http.GetFromJsonAsync<bool>($"api/authentication?role={roleRequirement}");
        }
        catch(AccessTokenNotAvailableException exception) {
            //idfk... Redirect eller sådan noget xd
            Console.WriteLine("Exeption Hit!");
        }

        if(isAuth) {
            Console.WriteLine("lesgo!");
        } else {
            Console.WriteLine("Sadge");
        }

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Divisions = await client.GetFromJsonAsync<List<Division>>($"api/Division?leagueID={leagueID}");

        foreach(Division division in Divisions) {
            division.teams = await client.GetFromJsonAsync<List<Team>>("api/TeamInformation?divisionID=" + division.divisionID);

            for(int i = 0; i < division.teams.Count; i++) {
                if(division.teams[i].leagueID != leagueID) {
                    division.teams.RemoveAt(i);
                }
            }
        }
    }

    async Task AutoGenerateDivisions() {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");
        Divisions.AddRange(await client.GetFromJsonAsync<List<Division>>($"api/Admin/genDivisions?leagueID={leagueID}&divisionAmount=2"));

        Divisions[0].teams = new List<Team>();

        foreach(Division division in Divisions) {
            foreach(Team team in division.teams) {
                team.divisionID = division.divisionID;
            }
        }

        StateHasChanged();
    }

    async Task DivisionListPost() {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Divisions.RemoveAt(0);

        await client.PostAsJsonAsync<List<Division>>("api/Division/DivList", Divisions);

        NavigationManager.NavigateTo($"/admin/ligaer/{leagueID}");
    }

    void MoveDivision(int OlddivID, Division div, Team team) {
        Console.WriteLine("");
        Console.WriteLine(team.teamName + " Skal");
        Console.WriteLine("FLyt til division " + div.divisionID);
        Console.WriteLine("Fjern fra division " + OlddivID);

        Divisions[div.divisionID].teams.Add(team);

        for(int i = 0; i < Divisions[OlddivID].teams.Count; i++) {
            if(Divisions[OlddivID].teams[i].teamName == team.teamName) {
                Divisions[OlddivID].teams.RemoveAt(i);
            }
        }

        StateHasChanged();
    }

    void createDivision() {
        Divisions.Add(new Division(Divisions.Count, leagueID, false));
        StateHasChanged();
    }
}
