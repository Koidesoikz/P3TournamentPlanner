@page "/admin/ligaerDivision/genererdivisoner/{leagueID:int}"
@using P3TournamentPlanner.Shared
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
<div class="header-div">
    <h1>Generer Divisoner</h1>
</div>

<section>
    @foreach (Division division in Divisions)
    {
        @if (division.divisionID == 0)
        {
            <h2>Venteliste</h2>
        }
        else
        {
            <div class="header-div">
                <h2>Division @division.divisionID</h2>
                @if (division.teams.Count < 1)
                {
                    <div class="wrapper">
                        <button class="btn-primary" @onclick="() => DeleteDivision(division)">Slet division</button>
                    </div>
                }
            </div>
        }
        <div class="division-div">
            <Dropzone Items="division.teams" TItem="Team" OnItemDrop="() => Rerender()">
                <div class="team-div">
                    <h2 style="margin: 0">@context.teamName</h2>
                    <h2 style="margin: 0">Skill rating: @context.teamSkillRating</h2>
                </div>
            </Dropzone>
        </div>
    }
    <div class="generate-div">
        <div class="generate-btn-div">
        @if (Divisions.Count == 1)
        {
            <div class="generate-wrapper">
                <label>Antal divisioner:</label>
                <input type="number" min="1" @bind="divisionAmount" />
            </div>
            <div class="generate-wrapper">
                <button @onclick="AutoGenerateDivisions">Auto generer divisioner</button>
            </div>
        }
        </div>
        <div class="generate-btn-div">
            <div class="wrapper first">
                <button class="btn-primary" @onclick="createDivision">Opret ny division</button>
            </div>
            <div class="wrapper">
                <button class="btn-primary" @onclick="DivisionListPost">Gem divisioner</button>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public int leagueID { get; set; }

    string divisionid = "";

    int divisionAmount;

    List<Division> Divisions = new List<Division>();

    //Auth Var
    bool isAuth = false;
    string roleRequirement = "Administrator";

    protected override async Task OnInitializedAsync() {
        try
        {
            isAuth = await Http.GetFromJsonAsync<bool>($"api/authentication?role={roleRequirement}");
        }
        catch(AccessTokenNotAvailableException exception)
        {
            //idfk... Redirect eller sådan noget xd
            Console.WriteLine("Exeption Hit!");
        }

        if(isAuth)
        {
            Console.WriteLine("lesgo!");
        } else
        {
            Console.WriteLine("Sadge");
        }

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Divisions = await client.GetFromJsonAsync<List<Division>>($"api/Division?leagueID={leagueID}");

        foreach(Division division in Divisions)
        {
            division.teams = await client.GetFromJsonAsync<List<Team>>("api/TeamInformation?divisionID=" + division.divisionID);

            for(int i = 0; i < division.teams.Count; i++)
            {
                if(division.teams[i].leagueID != leagueID)
                {
                    division.teams.RemoveAt(i);
                }
            }
        }
    }

    async Task AutoGenerateDivisions()
    {
        Divisions[0].teams = new();

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");
        Divisions.AddRange(await client.GetFromJsonAsync<List<Division>>($"api/Admin/genDivisions?leagueID={leagueID}&divisionAmount={divisionAmount}"));

        foreach(Division division in Divisions)
        {
            foreach(Team team in division.teams)
            {
                team.divisionID = division.divisionID;
            }
        }

        StateHasChanged();
    }

    async Task DivisionListPost()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Divisions.RemoveAt(0);

        await client.PostAsJsonAsync<List<Division>>("api/Division/DivList", Divisions);

        NavigationManager.NavigateTo($"/admin/ligaer/{leagueID}");
    }

    void DeleteDivision(Division division)
    {
        for (int i = 0; i < Divisions.Count; i++)
        {
            if (division.divisionID == Divisions[i].divisionID)
            {
                Divisions.RemoveAt(i);
            }
        }
        StateHasChanged();
    }

    void createDivision()
    {
        Divisions.Add(new Division(Divisions.Count, leagueID, false));
        StateHasChanged();
    }

    void Rerender()
    {
        StateHasChanged();
    }
}
