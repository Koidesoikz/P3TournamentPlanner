@using P3TournamentPlanner.Shared;
@using P3TournamentPlanner.Client.Pages.AdminPage.AdminPartials;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using P3TournamentPlanner.Client.Services;
@using System.Net;
@page "/admin"
@attribute [Authorize]
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject MessageService MessageService
@inject NavigationManager NavigationManager
<h1>Administrator</h1>

<section class="klub-section">
    <div class="header-div">
        <h2>Klub administratorer</h2>
        <div class="btn-div">
            <button class="btn-primary btn-klubadmin" @onclick='navigateToChangePassword'>Skift Kodeord</button>
        </div>
        <div class="btn-div">
            <button class="btn-primary btn-klubadmin" @onclick='() => ShowNewAdmin("block")'>Opret ny administrator</button>
        </div>
    </div>
    <div class="table-container">
        <table>
            <thead>
                <tr>
                    <th>Navn</th>
                    <th>Email</th>
                    <th>Telefon</th>
                    <th>Discord</th>
                </tr>
            </thead>
            <tbody>
                @foreach (SiteAdmin admin in admins)
                {
                    <tr>
                        <td>@admin.contactinfo.name</td>
                        <td>@admin.contactinfo.email</td>
                        <td>@admin.contactinfo.tlfNr</td>
                        <td>@admin.contactinfo.discordID</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div style="display: @newAdminDisplay">
        <div class="header-div">
            <h3>Ny klub administrator</h3>
        </div>
        <EditForm Model="ci" OnValidSubmit="PostAdmin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="manager-form">
                <div>
                    <label>Navn:</label>
                    <input @bind="ci.name" />
                </div>
                <div>
                    <label>Email:</label>
                    <input @bind="ci.email" />
                </div>
                <div>
                    <label>Telefon:</label>
                    <input @bind="ci.tlfNr" />
                </div>
                <div>
                    <label>Discord:</label>
                    <input @bind="ci.discordID" />
                </div>
                <div class="btn-div">
                    <button class="btn-primary" type="button" @onclick='() => ShowNewAdmin("none")'>Annuller</button>
                </div>
                <div class="btn-div">
                    <button class="btn-primary" type="submit">Opret</button>
                </div>
            </div>
        </EditForm>
    </div>
</section>

<hr />

<section class="table_container">
    <section class="table_container_background">
        <div class="table_menu">
            <button id="stilling-btn" @onclick='() => ChangeDisplay("ligaer")'>Ligaer</button>
            <button id="kampe-btn" @onclick='() => ChangeDisplay("klubber")'>Klubber</button>
        </div>
        @if (Display == "ligaer")
        {
            <style>
                #stilling-btn {
                    background-color: var(--penta-lilla)
                }
            </style>
            <AdminLigaer />
        }
        else if (Display == "klubber")
        {
            <style>
                #kampe-btn {
                    background-color: var(--penta-lilla)
                }
            </style>
            <AdminKlubber />
        }
    </section>
</section>

<div id="@MessageService.messageStyle" style="display: @MessageService.messageDisplay">
    @MessageService.message
    <a @onclick="reloadPage" class="reload">Reload</a>
    <a class="dismiss" @onclick='() => MessageService.showMessage("none", "")'>🗙</a>
</div>

@code {
    string Display = "ligaer";

    string newAdminDisplay = "none";

    bool isAuth = false;
    string roleRequirement = "Administrator";

    Contactinfo ci = new Contactinfo();

    List<User> users = new List<User>();
    List<SiteAdmin> admins = new List<SiteAdmin>();

    protected override async Task OnInitializedAsync()
    {
        MessageService.RefreshRequested += Refresh;
        MessageService.RerenderRequested += Rerender;

        try
        {
            isAuth = await Http.GetFromJsonAsync<bool>($"api/authentication?role={roleRequirement}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            //idfk... Redirect eller sådan noget xd
            Console.WriteLine("Exeption Hit!");
        }


        if (isAuth)
        {
            Console.WriteLine("lesgo!");
        }
        else
        {
            Console.WriteLine("Sadge");
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        await GetAdmin();
    }

    async Task PostAdmin()
    {
        var result = await Http.PostAsJsonAsync<Contactinfo>("api/admin/changeRole", ci);

        if (result.Content.ReadAsStringAsync().Result.Contains("Access denied"))
        {
            MessageService.showMessage("blazor-fejl-ui", "Access denied: Du har ikke adgang til denne komando");
        }
        else if (result.IsSuccessStatusCode)
        {
            MessageService.showMessage("blazor-gemt-ui", result.Content.ReadAsStringAsync().Result);
            Rerender();
            ShowNewAdmin("none");
        }
        else
        {
            MessageService.showMessage("blazor-fejl-ui", result.Content.ReadAsStringAsync().Result);
        }
    }

    void ShowNewAdmin(string display)
    {
        newAdminDisplay = display;
        StateHasChanged();
    }

    public void ChangeDisplay(string display)
    {
        Display = display;
        StateHasChanged();
    }

    async Task GetAdmin()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        admins = new List<SiteAdmin>();

        Console.WriteLine("Get Send");
        users = await Http.GetFromJsonAsync<List<User>>("api/Admin/users");
        Console.WriteLine("På den anden side");

        foreach (User user in users) if (user.roles.Contains("Administrator"))
            {
                Console.WriteLine("!!!!!!!!!!!!!!!!! USERID:::: " + user.ID);
                await GetContactInfo(user.ID);
            }

        StateHasChanged();
    }

    async Task GetContactInfo(string UserID)
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        Contactinfo contactinfo = await Http.GetFromJsonAsync<Contactinfo>("api/User?userID=" + UserID);
        Console.WriteLine("User: " + contactinfo.name + " --- " + UserID);
        Console.WriteLine("Heeeer" + contactinfo.name);
        Console.WriteLine("På den anden side");
        admins.Add(new SiteAdmin(contactinfo));
    }

    void navigateToChangePassword() {
        NavigationManager.NavigateTo("/changepassword", forceLoad: true);
    }

    void reloadPage()
    {
        NavigationManager.NavigateTo("/admin", forceLoad: true);
    }

    private void Refresh()
    {
        StateHasChanged();
    }

    private void Rerender()
    {
        InvokeAsync(OnParametersSetAsync);
        StateHasChanged();
    }
}