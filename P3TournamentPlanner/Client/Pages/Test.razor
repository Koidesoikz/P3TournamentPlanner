@page "/test"
@using P3TournamentPlanner.Shared
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory

<h3>Test</h3>
<p id="test">dinmor</p>
<button @onclick="MakeAdminTest">Make Admin</button>
<button @onclick="RevokeAdminTest">Revoke Admin</button>

@*<img src="data:image/png;base64, @DO.base64">*@

@code {
    DebugObject DO = new DebugObject();
    Team testTeam = new Team(3, 1, 1, "dinmorgay", 69, 69, 69, 69, 69, 69, 69, 69, 69, new ClubManager(new Contactinfo(), "dinMANAGERgay"), false);
    Player testPlayer = new Player("Test Navn", "Test IG navn", "Dette er et steamID", "CSGO RANK GO HERE", 69420);
    User testUser;
    List<User> testUserList;

    protected override async Task OnInitializedAsync() {

        //HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        //client.BaseAddress = new Uri("https://localhost:44341/");

        //Console.WriteLine("Get Send");
        //DO = await client.GetFromJsonAsync<DebugObject>("api/Debug");
        //Console.WriteLine("På den anden side");

    }

    private async void TestFunc() {
        Console.WriteLine("DIN MODER");
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        client.DefaultRequestHeaders.Add("teamID", "69");
        client.DefaultRequestHeaders.Add("clubID", "420");

        var res = await client.PostAsJsonAsync<Player>("api/Player", testPlayer);

        Console.WriteLine(res);

        //var res = await client.PutAsJsonAsync<Team>("api/Stilling", testTeam);

        //Console.WriteLine(res);
    }

    private async void MakeAdminTest() {
        testUserList = await Http.GetFromJsonAsync<List<User>>("api/admin/users");

        foreach(User user in testUserList) {
            if(user.email == "admin@admin.dk") testUser = user;
        }

        Http.DefaultRequestHeaders.Add("toBecomeAdmin", "true");

        var res = await Http.PostAsJsonAsync<User>("api/admin/changeRole", testUser);

        Console.WriteLine(res);
    }

    private async void RevokeAdminTest() {
        testUserList = await Http.GetFromJsonAsync<List<User>>("api/admin/users");

        foreach(User user in testUserList) {
            if(user.email == "admin@admin.dk") testUser = user;
        }

        Http.DefaultRequestHeaders.Add("toBecomeAdmin", "false");

        var res = await Http.PostAsJsonAsync<User>("api/admin/changeRole", testUser);

        Console.WriteLine(res);
    }
}