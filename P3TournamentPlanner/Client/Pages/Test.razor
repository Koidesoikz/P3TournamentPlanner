@page "/test"
@using P3TournamentPlanner.Shared
@using System.IO;
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory

<h3>Test</h3>
<p id="test">dinmor</p>

<InputFile OnChange="@TestXD"></InputFile>

<button @onclick="MakeAdminTest">Make Admin</button>
<button @onclick="RevokeAdminTest">Revoke Admin</button>
<button @onclick="GenerateMatches">Gen Match Test</button>
<button @onclick="GenerateDivisions">Gen Div Test</button>
<button @onclick="CommitDivisions">Commit divisions</button>
<button @onclick="GetLogo">Get Logo</button>
<button @onclick="PutLogo">Put Logo</button>
<button @onclick="IsManTest">isMan</button>
<button @onclick="ChangePassTest">Change curr users password to "123Patter"</button>
<button @onclick="ChangePassTest2">Change curr users password to "xd"</button>

<img src="data:image/png;base64, @imgSrc">

@code {
    DebugObject DO = new DebugObject();
    //Team testTeam = new Team(3, 1, 1, "dinmorgay", 69, 69, 69, 69, 69, 69, 69, 69, 69, new ClubManager(new Contactinfo(), "dinMANAGERgay"), false);
    Player testPlayer = new Player("Test Navn", "Test IG navn", "Dette er et steamID", "CSGO RANK GO HERE", 69420);
    User testUser;
    List<User> testUserList;

    List<Division> divList = new List<Division>();
    List<Division> GenDivRes = new List<Division>();

    List<Team> div1Teams = new List<Team>();
    List<Team> div2Teams = new List<Team>();

    List<Team> teamsToDivide = new List<Team>();

    Club debugClub = new Club(1, "Hobro Vikings", "Amerikavej 22, 9500 Hobro", "");

    List<string> dbgClubID = new List<string>();

    string imgSrc = "";
    string base64 = null;

    string newPass = "123Patter";
    string newPass2 = "xd";

    string roleRequirement = "Administrator";
    bool isAuth = false;



    protected override async Task OnInitializedAsync() {

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        isAuth = await Http.GetFromJsonAsync<bool>($"api/authentication?role={roleRequirement}");

        if(isAuth) {
            Console.WriteLine("lesgo!");
        } else {
            Console.WriteLine("Sadge");
        }

        //client.DefaultRequestHeaders.Add("teamID", "69");
        //client.DefaultRequestHeaders.Add("clubID", "420");

        //var res = await client.PostAsJsonAsync<Player>("api/Player", testPlayer);

        //Console.WriteLine(res);

        //var res = await client.PutAsJsonAsync<Team>("api/Stilling", testTeam);

        //Console.WriteLine(res);
    }

    private async void MakeAdminTest() {
        testUserList = await Http.GetFromJsonAsync<List<User>>("api/admin/users");

        foreach(User user in testUserList) {
            if(user.email == "admin@admin.dk") testUser = user;
        }

        Http.DefaultRequestHeaders.Add("toBecomeAdmin", "true");

        var res = await Http.PostAsJsonAsync<User>("api/admin/changeRole", testUser);

        Console.WriteLine(res);
    }

    private async void RevokeAdminTest() {
        testUserList = await Http.GetFromJsonAsync<List<User>>("api/admin/users");

        foreach(User user in testUserList) {
            if(user.email == "admin@admin.dk") testUser = user;
        }

        Http.DefaultRequestHeaders.Add("toBecomeAdmin", "false");

        var res = await Http.PostAsJsonAsync<User>("api/admin/changeRole", testUser);

        Console.WriteLine(res);
    }

    private async Task GenerateMatches() {
        div1Teams.Add(new Team(0, "Team 1"));
        div1Teams.Add(new Team(1, "Team 2"));
        div1Teams.Add(new Team(2, "Team 3"));
        div1Teams.Add(new Team(3, "Team 4"));
        div1Teams.Add(new Team(4, "Team 5"));

        div2Teams.Add(new Team(0, "Team 6"));
        div2Teams.Add(new Team(2, "Team 7"));
        div2Teams.Add(new Team(3, "Team 8"));
        div2Teams.Add(new Team(4, "Team 9"));

        divList.Add(new Division(div1Teams, new List<Match>()));
        divList.Add(new Division(div2Teams, new List<Match>()));

        League league = new League(divList);

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        var res = await client.PostAsJsonAsync<League>("api/admin/genMatches", league);

    }

    private async Task GenerateDivisions() {
        //teamsToDivide.Add(new Team("Team 1"));
        //teamsToDivide.Add(new Team("Team 2"));
        //teamsToDivide.Add(new Team("Team 3"));
        //teamsToDivide.Add(new Team("Team 4"));
        //teamsToDivide.Add(new Team("Team 5"));
        //teamsToDivide.Add(new Team("Team 6"));
        //teamsToDivide.Add(new Team("Team 7"));
        //teamsToDivide.Add(new Team("Team 8"));
        //teamsToDivide.Add(new Team("Team 9"));
        //teamsToDivide.Add(new Team("Team 10"));

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        //client.DefaultRequestHeaders.Add("divisionAmount", "3");

        GenDivRes = await client.GetFromJsonAsync<List<Division>>("api/admin/genDivisions?leagueID=2&divisionAmount=2");

        //var res = await client.PostAsJsonAsync<List<Team>>("api/admin/genDivisions", teamsToDivide);

        //Console.WriteLine(res);
    }

    private async Task GetLogo() {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        debugClub = await client.GetFromJsonAsync<Club>("api/klub/klub?clubID=1");

        imgSrc = debugClub.base64Logo;

        Console.WriteLine("xd: " + debugClub.base64Logo);
    }

    private async Task PutLogo() {
        //GenerateBase64();

        //Error handling så hjemmesiden ikke dør
        if(base64 == null) {
            throw new InvalidOperationException("No file is currently selected");
        }

        debugClub.base64Logo = base64;

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        var res = await client.PutAsJsonAsync<Club>("api/klub", debugClub);

        Console.WriteLine("xd: " + debugClub.base64Logo);
    }

    //private string GenerateBase64() {

    //}

    //Laver billede om til base64 byte representation hver gang en ny fil vælges
    //File -> datastream -> memorystream -> byte array -> base64 string
    private async Task TestXD(InputFileChangeEventArgs e) {
        Console.WriteLine("Det er her");
        Stream stream = e.File.OpenReadStream();
        MemoryStream ms = new MemoryStream();

        await stream.CopyToAsync(ms);
        byte[] imgByte = ms.ToArray();
        base64 = Convert.ToBase64String(imgByte);

        Console.WriteLine(base64);
    }

    private async Task IsManTest() {
        dbgClubID.Add("1");
        dbgClubID.Add("2");

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        bool isManager = await client.GetFromJsonAsync<bool>($"api/Authentication/isManager?ID1={dbgClubID[0]}&ID2={dbgClubID[1]}");

        Console.WriteLine("is manager " + isManager);
    }

    private async Task ChangePassTest() {
        var res = await Http.PostAsJsonAsync<string>("api/User/changePassword", newPass);
        Console.WriteLine(res);
    }

    private async Task ChangePassTest2() {
        var res = await Http.PostAsJsonAsync<string>("api/User/changePassword", newPass2);
        Console.WriteLine(res);
    }

    private async Task CommitDivisions() {
        var res = await Http.PostAsJsonAsync<List<Division>>("api/Division/DivList", GenDivRes);
        Console.WriteLine(res);
    }
}