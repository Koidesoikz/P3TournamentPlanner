@using P3TournamentPlanner.Shared;
@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@using System.Linq;
@using System.Net.Http;
@using System.Net.Http.Json;
@using System.Threading.Tasks;
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject Services.MatchService MatchService
<div id="matchSection" style="width: 100%">
    @foreach (Match match in matches)
    {
        @if (!match.playedFlag)
        {
            <div class="match-container">
                <div class="match-container-background" @onclick="() => ShowMatch(match)">
                    <div id="topPart">
                        <h1 class="match-header"> @match.teams[0].teamName</h1>
                        <h1 class="match-header" id="center"> VS </h1>
                        <h1 class="match-header"> @match.teams[1].teamName</h1>
                    </div>
                    <div id="lowPart">
                        <h3> @match.startTime</h3>
                        <h3>
                            @foreach (Club club in clubs)
                            {
                                @if (club.clubID == match.clubHostID)
                                {
                                    @club.address
                                }
                            }
                        </h3>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter]
    public int ID { get; set; }

    [Parameter]
    public string search { get; set; }

    [Parameter]
    public int? leagueID { get; set; }

    public string MapSti = "mirage.jpg";

    List<Match> matches = new List<Match>();
    List<Match> tempMatches = new List<Match>();
    List<Club> clubs = new List<Club>();

    protected override async Task OnParametersSetAsync()
    {
        matches = new List<Match>();
        tempMatches = new List<Match>();

        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://agreeable-meadow-086a24903.azurestaticapps.net/");

        if (search == "division")
        {
            Console.WriteLine("Get Send");
            tempMatches = await client.GetFromJsonAsync<List<Match>>("api/match/matches?division=" + ID);
            Console.WriteLine("På den anden side");
            Console.WriteLine(matches);
        }
        else if (search == "team")
        {
            Console.WriteLine("Get Send");
            tempMatches = await client.GetFromJsonAsync<List<Match>>("api/match/matches?teamID=" + ID);
            Console.WriteLine("På den anden side");
            Console.WriteLine(matches);
        }

        foreach (Match match in tempMatches)
        {
            Console.WriteLine(match.leagueID);
            Console.WriteLine("");
            if (match.leagueID == leagueID)
            {
                matches.Add(match);
            }
            else if (leagueID == null)
            {
                matches.Add(match);
            }
        }

        Console.WriteLine("Get Send");
        clubs = await client.GetFromJsonAsync<List<Club>>("api/Klub");
        Console.WriteLine("På den anden side");
        Console.WriteLine(clubs);
    }

    public void ShowMatch(Match match)
    {
        MatchService.match = match;
        NavigationManager.NavigateTo($"/kamp/{match.matchID}");
    }

    public void Rerender()
    {
        InvokeAsync(OnParametersSetAsync);
        StateHasChanged();
    }
}
