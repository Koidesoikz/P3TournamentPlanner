@using P3TournamentPlanner.Shared;
@using System;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
<table class="Stilling">
    <thead>
        <tr>
            <th class="placement">#</th>
            <th class="team">Hold</th>
            <th class="number">K</th>
            <th class="number">V</th>
            <th class="number">U</th>
            <th class="number">T</th>
            <th class="number">Diff</th>
            <th class="points">Points</th>
        </tr>
    </thead>
    <tbody>

        @if (teams == null)
        {
            <p>Loading</p>
        }
        else
        {
            @foreach (Team team in teams)
            {
                <tr @onclick="() => ShowTeam(team.name)">
                    <td class="placement">@team.placement</td>
                    <td class="team">@team.name</td>
                    <td class="number">@team.matchesPlayed</td>
                    <td class="number">@team.matchesWon</td>
                    <td class="number">@team.matchesDraw</td>
                    <td class="number">@team.matchesLost</td>
                    <td class="number">-----</td>
                    <td class="points">@team.points</td>
                </tr>
            }
        }


        @*@for (int i = 1; i < 5; i++)
            {
                <tr>
                    <td class="placement">@ID</td>
                    <td class="team">Hobro Vikings - hold @ID</td>
                    <td class="number">@ID</td>
                    <td class="number">@ID</td>
                    <td class="number">@ID</td>
                    <td class="number">@ID</td>
                    <td class="number">-----</td>
                    <td class="points">@ID</td>
                </tr>
            }*@
    </tbody>
</table>
@code {
    [Parameter]
    public int ID { get; set; }

    List<Team> teams = new List<Team>();
    string liga = "testLeague";
    string role = "Administrator";
    bool isAuth;

    protected override async Task OnParametersSetAsync()
    {
        HttpClient client = ClientFactory.CreateClient("ServerAPI.NoAuthenticationClient");
        client.BaseAddress = new Uri("https://localhost:44341/");

        Console.WriteLine("Get Send");
        teams = await client.GetFromJsonAsync<List<Team>>("Stilling?league=" + liga + "&division=" + ID);
        Console.WriteLine("På den anden side");
        Console.WriteLine(teams);
    }

    // <------- DETTE ER TIL HVIS MAN VIL ROLE AUTH EN SIDE!!!! SKAL BRUGES ANDRE STEDER!!!! --------->
    //try
    //{
    //    isAuth = await Http.GetFromJsonAsync<bool>("Authentication?role=" + role);

    //    if (isAuth)
    //    {
    //        Console.WriteLine("Get Send");
    //        teams = await Http.GetFromJsonAsync<List<Team>>("Stilling?league=" + liga + "&division=" + ID);
    //        Console.WriteLine("På den anden side");
    //    }
    //    else
    //    {
    //        //Her skal vi redirect til error page :)
    //        Console.WriteLine("hihi xd");
    //    }
    //}
    //catch (AccessTokenNotAvailableException exception)
    //{
    //    Console.WriteLine("Upsie doopsie!");
    //    exception.Redirect();
    //}

    public void ShowTeam(string teamName)
    {
        NavigationManager.NavigateTo($"/hold/{teamName}");
    }
}
